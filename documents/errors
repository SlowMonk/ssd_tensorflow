######################################################################################
 [error]
  File "/home/jake/Gits/ssd_tensorflow/train.py", line 36, in train
    run_train(dataset.map(resize_image, num_parallel_calls=tf.data.experimental.AUTOTUNE).batch(64).prefetch(tf.data.experimental.AUTOTUNE))
  File "/home/jake/Gits/ssd_tensorflow/train.py", line 22, in run_train
    predicted_locs, predicted_socres = model(image)# (N, 8732, 4), (N, 8732, n_classes)
  File "/home/jake/venv/lib/python3.7/site-packages/tensorflow_core/python/keras/engine/base_layer.py", line 891, in __call__
    outputs = self.call(cast_inputs, *args, **kwargs)
  File "/home/jake/Gits/ssd_tensorflow/model.py", line 39, in call
    x = self.conv1_1(x)
TypeError: 'tuple' object is not callable

def call(self,x):
    x = self.conv1_1(x)
    x = self.conv1_2(x)
    x = self.pool1(x)

[solution]
class  VGGBase(Model):
    def __init__(self):
        super(VGGBase,self).__init__()
        self.padding_1 = tf.keras.layers.ZeroPadding2D(padding=(1, 1))  # put this before your conv layer
        self.conv1_1 = tf.keras.layers.Conv2D(3, kernel_size=3,padding='same',strides=1, activation='relu')
        self.conv1_2 = tf.keras.layers.Conv2D(64, kernel_size=3, padding='same',strides=1,activation='relu')
        self.pool1 = tf.keras.layers.MaxPool2D(2,2)
모델 conv layer 다음에 , 붙이면 tuple error
######################################################################################
[error]
File "/home/jake/venv/lib/python3.7/site-packages/tensorflow/python/framework/constant_op.py", line 270, in _constant_impl
    t = convert_to_eager_tensor(value, ctx, dtype)
  File "/home/jake/venv/lib/python3.7/site-packages/tensorflow/python/framework/constant_op.py", line 96, in convert_to_eager_tensor
    return ops.EagerTensor(value, ctx.device_name, dtype)
ValueError: Can't convert non-rectangular Python sequence to Tensor.

print(type(image), type(target))
<class 'tensorflow.python.framework.ops.EagerTensor'> <class 'tensorflow.python.ops.ragged.ragged_tensor.RaggedTensor'>

[solution]
boxes = tf.ragged.constant(boxes)
######################################################################################
[error]

>>> a = torch.randn(4)
>>> a
tensor([ 0.7753, -0.4702, -0.4599,  1.1899])
>>> torch.clamp(a, max=0.5)
tensor([ 0.5000, -0.4702, -0.4599,  0.5000])

tensorflow에서 clamp의 function 이 있는지?

[solution]
######################################################################################
[error]

# Predict localization boxes' bounds (as offsets w.r.t prior-boxes)
        l_conv4_3 = self.loc_conv4_3(conv4_3_feats)  # (N, 16, 38, 38)
        l_conv4_3 = l_conv4_3.permute(0, 2, 3,
                                      1).contiguous()  # (N, 38, 38, 16), to match prior-box order (after .view())
        # (.contiguous() ensures it is stored in a contiguous chunk of memory, needed for .view() below)
        l_conv4_3 = l_conv4_3.view(batch_size, -1, 4)  # (N, 5776, 4), there are a total 5776 boxes on this feature map
File "/home/jake/venv/lib/python3.7/site-packages/tensorflow/python/framework/ops.py", line 6653, in raise_from_not_ok_status
    six.raise_from(core._status_to_exception(e.code, message), None)
  File "<string>", line 3, in raise_from
tensorflow.python.framework.errors_impl.InvalidArgumentError: Shapes of all inputs must match: values[0].shape = [37,37,512] != values[1].shape = [] [Op:Pack]

Process finished with exit code 1
[solution]

######################################################################################
[error]
[solution]
######################################################################################
[error]
[solution]
######################################################################################
[error]
[solution]
######################################################################################
[error]
[solution]
######################################################################################
[error]
[solution]
######################################################################################